// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reverseme.proto

#ifndef PROTOBUF_reverseme_2eproto__INCLUDED
#define PROTOBUF_reverseme_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace example {
namespace reverseme {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_reverseme_2eproto();
void protobuf_AssignDesc_reverseme_2eproto();
void protobuf_ShutdownFile_reverseme_2eproto();

class SomeData;
class SomeData_OtherData;

// ===================================================================

class SomeData_OtherData : public ::google::protobuf::Message {
 public:
  SomeData_OtherData();
  virtual ~SomeData_OtherData();
  
  SomeData_OtherData(const SomeData_OtherData& from);
  
  inline SomeData_OtherData& operator=(const SomeData_OtherData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SomeData_OtherData& default_instance();
  
  void Swap(SomeData_OtherData* other);
  
  // implements Message ----------------------------------------------
  
  SomeData_OtherData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SomeData_OtherData& from);
  void MergeFrom(const SomeData_OtherData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 test = 1 [default = 1];
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline ::google::protobuf::int32 test() const;
  inline void set_test(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:com.example.reverseme.SomeData.OtherData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 test_;
  friend void  protobuf_AddDesc_reverseme_2eproto();
  friend void protobuf_AssignDesc_reverseme_2eproto();
  friend void protobuf_ShutdownFile_reverseme_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SomeData_OtherData* default_instance_;
};
// -------------------------------------------------------------------

class SomeData : public ::google::protobuf::Message {
 public:
  SomeData();
  virtual ~SomeData();
  
  SomeData(const SomeData& from);
  
  inline SomeData& operator=(const SomeData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SomeData& default_instance();
  
  void Swap(SomeData* other);
  
  // implements Message ----------------------------------------------
  
  SomeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SomeData& from);
  void MergeFrom(const SomeData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SomeData_OtherData OtherData;
  
  // accessors -------------------------------------------------------
  
  // required .com.example.reverseme.SomeData.OtherData data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::com::example::reverseme::SomeData_OtherData& data() const;
  inline ::com::example::reverseme::SomeData_OtherData* mutable_data();
  
  // optional string comment = 2;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 2;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  
  // @@protoc_insertion_point(class_scope:com.example.reverseme.SomeData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::com::example::reverseme::SomeData_OtherData* data_;
  ::std::string* comment_;
  static const ::std::string _default_comment_;
  friend void  protobuf_AddDesc_reverseme_2eproto();
  friend void protobuf_AssignDesc_reverseme_2eproto();
  friend void protobuf_ShutdownFile_reverseme_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SomeData* default_instance_;
};
// ===================================================================


// ===================================================================

// SomeData_OtherData

// required int32 test = 1 [default = 1];
inline bool SomeData_OtherData::has_test() const {
  return _has_bit(0);
}
inline void SomeData_OtherData::clear_test() {
  test_ = 1;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SomeData_OtherData::test() const {
  return test_;
}
inline void SomeData_OtherData::set_test(::google::protobuf::int32 value) {
  _set_bit(0);
  test_ = value;
}

// -------------------------------------------------------------------

// SomeData

// required .com.example.reverseme.SomeData.OtherData data = 1;
inline bool SomeData::has_data() const {
  return _has_bit(0);
}
inline void SomeData::clear_data() {
  if (data_ != NULL) data_->::com::example::reverseme::SomeData_OtherData::Clear();
  _clear_bit(0);
}
inline const ::com::example::reverseme::SomeData_OtherData& SomeData::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::com::example::reverseme::SomeData_OtherData* SomeData::mutable_data() {
  _set_bit(0);
  if (data_ == NULL) data_ = new ::com::example::reverseme::SomeData_OtherData;
  return data_;
}

// optional string comment = 2;
inline bool SomeData::has_comment() const {
  return _has_bit(1);
}
inline void SomeData::clear_comment() {
  if (comment_ != &_default_comment_) {
    comment_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SomeData::comment() const {
  return *comment_;
}
inline void SomeData::set_comment(const ::std::string& value) {
  _set_bit(1);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void SomeData::set_comment(const char* value) {
  _set_bit(1);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void SomeData::set_comment(const char* value, size_t size) {
  _set_bit(1);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SomeData::mutable_comment() {
  _set_bit(1);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  return comment_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace reverseme
}  // namespace example
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_reverseme_2eproto__INCLUDED
